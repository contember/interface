:where(.layout-panel) {
	content-visibility: visible;
	display: flex;
	flex-basis: var(--panel-basis);
	flex-direction: column;
	flex-grow: 1;
	flex-shrink: 1;
	min-width: var(--panel-min-width, 0px);
	opacity: 1;
}

:where(.layout-panel) {
	transition-property: transform, opacity;
	transition-timing-function: ease-in;
	transition-duration: var(--cui-transition-duration);
}

:where(.layout-panel):where(
	.layout-panel-behavior-overlay,
	.layout-panel-behavior-modal,
) {
	overflow: hidden;
	overscroll-behavior: contain;
}

:where(
	.layout-panel,
):where(
	.layout-panel-behavior-overlay,
	.layout-panel-behavior-modal,
) {
	align-items: center;
	background: rgba(0, 0, 0, 0.2);
	position: fixed;
	left: 0;
	top: 0;
	right: 0;
	bottom: 0;
}

:where(.layout-panel.layout-panel-behavior-overlay) {
	background-color: var(--cui-background-color--above);
	color: var(--cui-color);
	z-index: 3;
}

:where(.layout-panel.layout-panel-behavior-modal) {
	background: rgba(0, 0, 0, 0.2);
	z-index: 4;
}

:where(
	.layout-panel.layout-panel-behavior-modal.layout-panel-visibility-visible
) {
	pointer-events: all;
}

:where(
	.layout-panel:not(.layout-panel-behavior-modal),
) {
	max-width: var(--panel-max-width, 100vw);
	max-width: var(--panel-max-width, 100dvw);
}

:where(
	.layout-panel:not(.layout-panel-visibility-visible),
) {
	clip-path: inset(0 0 0 0);
	overflow: hidden;
	pointer-events: none;
}

:where(
	.layout-panel,
):where(
	.layout-panel-visibility-hidden,
	.layout-panel-visibility-will-become-hidden,
) {
	pointer-events: none;
	opacity: 0;
}

:where(
	.layout-panel,
):where(
	.layout-panel-visibility-hidden
) {
	content-visibility: hidden;
}

:where(
	.layout-panel,
):where(
	.layout-panel-behavior-collapsible,
	.layout-panel-behavior-static,
):where(
	.layout-panel-visibility-hidden,
	.layout-panel-visibility-will-become-hidden,
) {
	flex-basis: 0px;
	max-width: 0px;
	min-width: 0px;
	width: 0px;
}
