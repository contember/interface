:where(.cui-editorBlockBoundary) {
	--cui-editor-block-boundary--height: var(--cui-editor-blocks-gap);
	align-items: center;
	cursor: pointer;
	display: flex;
	flex-direction: row;
	font-weight: 600;
	height: var(--cui-editor-block-boundary--height);
	justify-content: flex-start;
	margin: 0 auto 0 calc(-1 * var(--cui-editor-block--element-handle-width, 0));
	padding-left: var(--cui-editor-block--element-handle-width, 0);
	position: relative;
}

:where(.cui-editorBlockBoundary)::after,
:where(.cui-editorBlockBoundary)::before {
	background-color: rgb(var(--cui-background-color--controls-rgb-50));
	border-radius: 2px;
	content: "";
	display: block;
	flex-grow: 1;
	height: 2px;
	visibility: hidden;
	padding: 0;
}

:where(.is-dragged .cui-editorBlockBoundary) {
	display: none;
}

:where(.cui-editorBlockBoundary.view-afterBlock) {
	margin-bottom: calc(-1 * var(--cui-editor-block-boundary--height));
}

:where(.cui-editorBlockBoundary.view-beforeBlock) {
	margin-top: calc(-1 * var(--cui-editor-block-boundary--height));
}

:where(.cui-editorBlockBoundary.view-beforeBlock + *:not(.cui-editorTable)) {
	display: flex;
	flex-direction: column;
	justify-content: center;
	min-height: var(--cui-editor-block--element-handle-height);
}

:where(.cui-editorBlockBoundary .cui-icon) {
	align-items: center;
	color: inherit;
	justify-content: center;
}

:where(.cui-editorBlockBoundary-inner) {
	align-items: center;
	background-color: rgb(var(--cui-background-color--rgb-50));
	border-radius: 1em;
	color: rgba(var(--cui-color--rgb-50), var(--cui-opacity--lower));
	display: flex;
	flex-direction: row;
	line-height: 1em;
	padding: calc(var(--cui-gap) / 2);
}

:where(.cui-editorBlockBoundary .cui-label) {
	display: none;
	margin-left: 0;
	margin-right: 0;
}

:where(.cui-editorBlockBoundary .cui-editorCanvas-canvas > div[data-contember-type=reference] + div[data-contember-type=reference] .cui-editorBlockBoundary.view-beforeBlock) {
	display: none;
}

@media (hover: hover) and (pointer: fine) {
	:where(.cui-editorBlockBoundary-inner) {
		background-color: rgb(var(--cui-background-color--controls-rgb-50));
		color: rgb(var(--cui-background-color--rgb-50));
		visibility: hidden;
	}

	:where(.cui-editorBlockBoundary:hover) {
		color: rgb(var(--cui-color--accent-rgb-50));
	}

	:where(.cui-editorBlockBoundary:hover .cui-editorBlockBoundary-inner),
	:where(.cui-editorBlockBoundary:hover)::after,
	:where(.cui-editorBlockBoundary:hover)::before {
		visibility: visible;
	}

	:where(.cui-editorBlockBoundary:hover .cui-label) {
		display: flex;
	}
}
